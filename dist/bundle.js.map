{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://understanding-ts/./src/components/base-component.ts","webpack://understanding-ts/./src/util/validation.ts","webpack://understanding-ts/./src/decorators/autobind.ts","webpack://understanding-ts/./src/models/project.ts","webpack://understanding-ts/./src/state/project-state.ts","webpack://understanding-ts/./src/components/project-input.ts","webpack://understanding-ts/./src/components/project-item.ts","webpack://understanding-ts/./src/components/project-list.ts","webpack://understanding-ts/./src/app.ts"],"sourcesContent":["// Component Class\r\nexport default abstract class Component<\r\n  T extends HTMLElement,\r\n  U extends HTMLElement\r\n> {\r\n  templateElement: HTMLTemplateElement; // template要素取得用\r\n  hostElement: T; // template要素出力用\r\n  element: U; // template内要素取得用\r\n\r\n  constructor(\r\n    templateId: string,\r\n    hostElementId: string,\r\n    insertAtStart: boolean,\r\n    newElementId?: string\r\n  ) {\r\n    // tamplateタグの内容を取得\r\n    this.templateElement = document.getElementById(\r\n      templateId\r\n    )! as HTMLTemplateElement;\r\n    this.hostElement = document.getElementById(hostElementId)! as T;\r\n\r\n    const importedNode = document.importNode(\r\n      this.templateElement.content,\r\n      true\r\n    );\r\n    this.element = importedNode.firstElementChild as U;\r\n    if (newElementId) {\r\n      this.element.id = newElementId;\r\n    }\r\n    this.attach(insertAtStart);\r\n  }\r\n\r\n  abstract configure(): void;\r\n  abstract renderContent(): void;\r\n\r\n  private attach(insertAtBeginning: boolean) {\r\n    this.hostElement.insertAdjacentElement(\r\n      insertAtBeginning ? \"afterbegin\" : \"beforeend\",\r\n      this.element\r\n    );\r\n  }\r\n}\r\n","// validation\r\nexport interface Validatable {\r\n  value?: string | number;\r\n  required?: boolean;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  min?: number;\r\n  max?: number;\r\n}\r\n\r\nexport function validate(validatableInput: Validatable) {\r\n  let isValid = true;\r\n  if (validatableInput.required) {\r\n    isValid = isValid && validatableInput.value?.toString().trim().length !== 0;\r\n  }\r\n  if (\r\n    validatableInput.minLength !== undefined &&\r\n    typeof validatableInput.value === \"string\"\r\n  ) {\r\n    isValid =\r\n      isValid && validatableInput.value.length >= validatableInput.minLength;\r\n  }\r\n  if (\r\n    validatableInput.maxLength !== undefined &&\r\n    typeof validatableInput.value === \"string\"\r\n  ) {\r\n    isValid =\r\n      isValid && validatableInput.value.length <= validatableInput.maxLength;\r\n  }\r\n  if (\r\n    validatableInput.min !== undefined &&\r\n    typeof validatableInput.value === \"number\"\r\n  ) {\r\n    isValid = isValid && validatableInput.value >= validatableInput.min;\r\n  }\r\n  if (\r\n    validatableInput.max !== undefined &&\r\n    typeof validatableInput.value === \"number\"\r\n  ) {\r\n    isValid = isValid && validatableInput.value <= validatableInput.max;\r\n  }\r\n  return isValid;\r\n}\r\n","// autobind decorator\r\nexport function autobind(_: any, _2: string, descriptor: PropertyDescriptor) {\r\n  const originalMethod = descriptor.value;\r\n  const adjDescriptor: PropertyDescriptor = {\r\n    configurable: true,\r\n    get() {\r\n      const boundFn = originalMethod.bind(this);\r\n      return boundFn;\r\n    },\r\n  };\r\n  return adjDescriptor;\r\n}\r\n","// Project Type\r\nexport enum ProjectStatus {\r\n  Active,\r\n  Finished,\r\n}\r\n\r\n// Project Class\r\nexport class Project {\r\n  constructor(\r\n    public id: string,\r\n    public title: string,\r\n    public description: string,\r\n    public manday: number,\r\n    public status: ProjectStatus\r\n  ) {}\r\n}\r\n","import { Project, ProjectStatus } from \"../models/project\";\r\n\r\n// Project State Management\r\ntype listener<T> = (items: T[]) => void;\r\n\r\nclass State<T> {\r\n  protected listeners: listener<T>[] = [];\r\n  addListener(linstenerFn: listener<T>) {\r\n    this.listeners.push(linstenerFn);\r\n  }\r\n}\r\n\r\nexport class ProjectState extends State<Project> {\r\n  private projects: Project[] = [];\r\n  private static instance: ProjectState;\r\n\r\n  private constructor() {\r\n    super();\r\n  }\r\n\r\n  static getInstance() {\r\n    if (this.instance) {\r\n      return this.instance;\r\n    }\r\n    this.instance = new ProjectState();\r\n    return this.instance;\r\n  }\r\n\r\n  addProject(title: string, description: string, manday: number) {\r\n    const newProject = new Project(\r\n      Math.random().toString(),\r\n      title,\r\n      description,\r\n      manday,\r\n      ProjectStatus.Active\r\n    );\r\n    this.projects.push(newProject);\r\n    this.updateListeners();\r\n  }\r\n\r\n  moveProject(projectId: string, newStatus: ProjectStatus) {\r\n    const project = this.projects.find((prj) => prj.id === projectId);\r\n    if (project && project.status !== newStatus) {\r\n      project.status = newStatus;\r\n      this.updateListeners();\r\n    }\r\n  }\r\n\r\n  private updateListeners() {\r\n    for (const linstenerFn of this.listeners) {\r\n      linstenerFn(this.projects.slice());\r\n    }\r\n  }\r\n}\r\n\r\nexport const projectState = ProjectState.getInstance();\r\n","import Cmp from \"./base-component\";\r\nimport * as Validation from \"../util/validation\";\r\nimport { autobind as Autobind } from \"../decorators/autobind\";\r\nimport { projectState } from \"../state/project-state\";\r\n\r\n// ProjectInput Class\r\nexport class ProjectInput extends Cmp<HTMLDivElement, HTMLFormElement> {\r\n  titleInputElement: HTMLInputElement; // form_title取得用\r\n  descriptionInputElement: HTMLInputElement; // form_description取得用\r\n  mandayInputElement: HTMLInputElement; // form_manday取得用\r\n\r\n  constructor() {\r\n    super(\"project-input\", \"app\", true, \"user-input\");\r\n\r\n    // form内要素の入力値を取得\r\n    this.titleInputElement = this.element.querySelector(\r\n      \"#title\"\r\n    ) as HTMLInputElement;\r\n    this.descriptionInputElement = this.element.querySelector(\r\n      \"#description\"\r\n    ) as HTMLInputElement;\r\n    this.mandayInputElement = this.element.querySelector(\r\n      \"#manday\"\r\n    ) as HTMLInputElement;\r\n\r\n    this.configure();\r\n  }\r\n\r\n  // submitが押されたことを受信する\r\n  configure() {\r\n    this.element.addEventListener(\"submit\", this.submitHandler);\r\n  }\r\n\r\n  renderContent() {}\r\n\r\n  private gatherUserInput(): [string, string, number] | void {\r\n    const enteredTitle = this.titleInputElement.value;\r\n    const enteredDescription = this.descriptionInputElement.value;\r\n    const enteredManday = this.mandayInputElement.value;\r\n\r\n    const titleValidatable: Validation.Validatable = {\r\n      value: enteredTitle,\r\n      required: true,\r\n    };\r\n    const descriptionValidatable: Validation.Validatable = {\r\n      value: enteredDescription,\r\n      required: true,\r\n      minLength: 5,\r\n    };\r\n    const mandayValidatable: Validation.Validatable = {\r\n      value: +enteredManday,\r\n      required: true,\r\n      min: 1,\r\n      max: 1000,\r\n    };\r\n    if (\r\n      !Validation.validate(titleValidatable) ||\r\n      !Validation.validate(descriptionValidatable) ||\r\n      !Validation.validate(mandayValidatable)\r\n    ) {\r\n      alert(\"入力値が正しくありません。再度お試しください。\");\r\n      return;\r\n    } else {\r\n      return [enteredTitle, enteredDescription, +enteredManday];\r\n    }\r\n  }\r\n\r\n  private clearInputs() {\r\n    this.titleInputElement.value = \"\";\r\n    this.descriptionInputElement.value = \"\";\r\n    this.mandayInputElement.value = \"\";\r\n  }\r\n\r\n  // 指定されたタグ内の値を出力する\r\n  @Autobind\r\n  private submitHandler(event: Event) {\r\n    event.preventDefault();\r\n    console.log(this.titleInputElement.value);\r\n    const userInput = this.gatherUserInput();\r\n    if (Array.isArray(userInput)) {\r\n      const [title, desc, manday] = userInput;\r\n      projectState.addProject(title, desc, manday);\r\n      this.clearInputs();\r\n    }\r\n  }\r\n}\r\n","import { Draggable } from \"../models/drag-drop\";\r\nimport { Project } from \"../models/project\";\r\nimport Component from \"./base-component\";\r\nimport { autobind } from \"../decorators/autobind\";\r\n\r\n// ProjectItem Class\r\nexport class ProjectItem\r\n  extends Component<HTMLUListElement, HTMLLIElement>\r\n  implements Draggable\r\n{\r\n  private project: Project;\r\n\r\n  get manday() {\r\n    if (this.project.manday < 20) {\r\n      return this.project.manday.toString() + \"人日\";\r\n    } else {\r\n      return (this.project.manday / 20).toString() + \"人月\";\r\n    }\r\n  }\r\n\r\n  constructor(hostId: string, project: Project) {\r\n    super(\"single-project\", hostId, false, project.id);\r\n    this.project = project;\r\n\r\n    this.configure();\r\n    this.renderContent();\r\n  }\r\n  @autobind\r\n  dragStartHandler(event: DragEvent): void {\r\n    event.dataTransfer!.setData(\"text/plain\", this.project.id);\r\n    event.dataTransfer!.effectAllowed = \"move\";\r\n  }\r\n  dragEndHandler(_: DragEvent): void {\r\n    console.log(\"Drag終了\");\r\n  }\r\n\r\n  configure(): void {\r\n    this.element.addEventListener(\"dragstart\", this.dragStartHandler);\r\n    this.element.addEventListener(\"dragend\", this.dragEndHandler);\r\n  }\r\n\r\n  renderContent(): void {\r\n    this.element.querySelector(\"h2\")!.textContent = this.project.title;\r\n    this.element.querySelector(\"h3\")!.textContent = this.manday;\r\n    this.element.querySelector(\"p\")!.textContent = this.project.description;\r\n  }\r\n}\r\n","import { DragTarget } from \"../models/drag-drop\";\r\nimport { Project, ProjectStatus } from \"../models/project\";\r\nimport Component from \"./base-component\";\r\nimport { autobind } from \"../decorators/autobind\";\r\nimport { projectState } from \"../state/project-state\";\r\nimport { ProjectItem } from \"./project-item\";\r\n\r\n// ProjectList Class\r\nexport class ProjectList\r\n  extends Component<HTMLDivElement, HTMLElement>\r\n  implements DragTarget\r\n{\r\n  assigneProjects: Project[];\r\n\r\n  constructor(private type: \"active\" | \"finished\") {\r\n    super(\"project-list\", \"app\", false, `${type}-projects`);\r\n    this.assigneProjects = [];\r\n\r\n    this.configure();\r\n    this.renderContent();\r\n  }\r\n\r\n  @autobind\r\n  dragOverHandler(event: DragEvent): void {\r\n    if (event.dataTransfer && event.dataTransfer.types[0] === \"text/plain\") {\r\n      event.preventDefault();\r\n      const listEl = this.element.querySelector(\"ul\")!;\r\n      listEl.classList.add(\"droppable\");\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  dropHandler(event: DragEvent): void {\r\n    const prjId = event.dataTransfer!.getData(\"text/plain\");\r\n    projectState.moveProject(\r\n      prjId,\r\n      this.type === \"active\" ? ProjectStatus.Active : ProjectStatus.Finished\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  dragLeaveHandler(_: DragEvent): void {\r\n    const listEl = this.element.querySelector(\"ul\")!;\r\n    listEl.classList.remove(\"droppable\");\r\n  }\r\n\r\n  configure() {\r\n    this.element.addEventListener(\"dragover\", this.dragOverHandler);\r\n    this.element.addEventListener(\"drop\", this.dropHandler);\r\n    this.element.addEventListener(\"dragleave\", this.dragLeaveHandler);\r\n\r\n    projectState.addListener((projects: Project[]) => {\r\n      const relevantProjects = projects.filter((prj) => {\r\n        if (this.type === \"active\") {\r\n          return prj.status === ProjectStatus.Active;\r\n        }\r\n        return prj.status === ProjectStatus.Finished;\r\n      });\r\n      this.assigneProjects = relevantProjects;\r\n      this.renderProjects();\r\n    });\r\n    this.renderContent();\r\n  }\r\n\r\n  renderContent() {\r\n    const listId = `${this.type}-projects-list`;\r\n    this.element.querySelector(\"ul\")!.id = listId;\r\n    this.element.querySelector(\"h2\")!.textContent =\r\n      this.type === \"active\" ? \"実行中プロジェクト\" : \"完了プロジェクト\";\r\n  }\r\n\r\n  private renderProjects() {\r\n    const listEl = document.getElementById(\r\n      `${this.type}-projects-list`\r\n    )! as HTMLUListElement;\r\n    listEl.innerHTML = \"\";\r\n    for (const prjItem of this.assigneProjects) {\r\n      new ProjectItem(listEl.id, prjItem);\r\n    }\r\n  }\r\n}\r\n","import { ProjectInput } from \"./components/project-input\";\r\nimport { ProjectList } from \"./components/project-list\";\r\n\r\nnew ProjectInput();\r\nnew ProjectList(\"active\");\r\nnew ProjectList(\"finished\");\r\n"],"names":["Component","constructor","templateId","hostElementId","insertAtStart","newElementId","this","templateElement","document","getElementById","hostElement","importedNode","importNode","content","element","firstElementChild","id","attach","insertAtBeginning","insertAdjacentElement","validate","validatableInput","isValid","required","value","toString","trim","length","undefined","minLength","maxLength","min","max","autobind","_","_2","descriptor","originalMethod","configurable","get","bind","ProjectStatus","Project","title","description","manday","status","State","listeners","addListener","linstenerFn","push","ProjectState","super","projects","getInstance","instance","addProject","newProject","Math","random","Active","updateListeners","moveProject","projectId","newStatus","project","find","prj","slice","projectState","ProjectInput","titleInputElement","querySelector","descriptionInputElement","mandayInputElement","configure","addEventListener","submitHandler","renderContent","gatherUserInput","enteredTitle","enteredDescription","enteredManday","descriptionValidatable","mandayValidatable","alert","clearInputs","event","preventDefault","console","log","userInput","Array","isArray","desc","ProjectItem","hostId","dragStartHandler","dataTransfer","setData","effectAllowed","dragEndHandler","textContent","ProjectList","type","assigneProjects","dragOverHandler","types","classList","add","dropHandler","prjId","getData","Finished","dragLeaveHandler","remove","relevantProjects","filter","renderProjects","listId","listEl","innerHTML","prjItem"],"sourceRoot":""}